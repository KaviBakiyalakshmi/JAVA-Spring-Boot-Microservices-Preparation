### Java `java.util.concurrent` - All-in-One Reference Table

| No. | Name                        | Type       | Methods (Examples)                                 | Description                                                                                     | Sample Code                                                                                     |
|-----|-----------------------------|------------|----------------------------------------------------|--------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------|
| 1   | Executor                    | Interface  | `execute(Runnable)`                                | Executes a task without returning a result.                                                     | `executor.execute(() -> System.out.println("Task"));`                                          |
| 2   | ExecutorService             | Interface  | `submit()`, `shutdown()`, `invokeAll()`            | Manages and controls thread execution and lifecycle.                                             | `ExecutorService service = Executors.newFixedThreadPool(2); service.submit(() -> ...);`         |
| 3   | ScheduledExecutorService   | Interface  | `schedule()`, `scheduleAtFixedRate()`              | Schedules tasks to run after delay or periodically.                                              | `scheduler.schedule(() -> System.out.println("Delayed"), 5, TimeUnit.SECONDS);`                |
| 4   | Callable<T>                | Interface  | `T call()`                                          | Represents a task that returns a result.                                                         | `Callable<String> task = () -> "Result";`                                                      |
| 5   | Future<T>                  | Interface  | `get()`, `cancel()`, `isDone()`                    | Represents the result of an asynchronous computation.                                            | `Future<Integer> future = service.submit(() -> 5+5); System.out.println(future.get());`         |
| 6   | BlockingQueue              | Interface  | `put()`, `take()`                                  | Queue supporting blocking operations for producers/consumers.                                   | `BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10); queue.put(1);`                    |
| 7   | ConcurrentMap              | Interface  | `putIfAbsent()`, `remove()`, `replace()`           | A map supporting atomic operations for concurrent access.                                        | `ConcurrentMap<String, String> map = new ConcurrentHashMap<>();`                                |
| 8   | RunnableScheduledFuture    | Interface  | Combines `Runnable`, `ScheduledFuture`             | Represents a task that is both runnable and scheduled.                                           | Used internally by schedulers.                                                                  |
| 9   | CountDownLatch             | Class      | `await()`, `countDown()`                           | Synchronization aid that allows threads to wait for others to complete.                         | `latch.countDown(); latch.await();`                                                             |
| 10  | CyclicBarrier              | Class      | `await()`                                          | Makes threads wait at a barrier point until all reach it.                                        | `barrier.await();`                                                                              |
| 11  | Semaphore                  | Class      | `acquire()`, `release()`                           | Controls access to a shared resource using permits.                                              | `semaphore.acquire(); semaphore.release();`                                                     |
| 12  | ConcurrentHashMap          | Class      | `put()`, `get()`, `compute()`                      | Thread-safe hash map with concurrent access.                                                     | `map.put("A", 1); map.compute("A", (k,v) -> v+1);`                                             |
| 13  | ThreadPoolExecutor         | Class      | `execute()`, `submit()`, `shutdown()`              | Executes tasks using a pool of threads. Highly customizable.                                     | `ThreadPoolExecutor exec = (ThreadPoolExecutor) Executors.newFixedThreadPool(2); exec.execute(...);` |
| 14  | CopyOnWriteArrayList       | Class      | `add()`, `get()`, `iterator()`                     | Thread-safe list optimized for many reads and few writes.                                        | `CopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>(); list.add("Item");`         |
| 15  | ArrayBlockingQueue         | Class      | `put()`, `take()`                                  | A bounded blocking queue backed by an array.                                                     | `ArrayBlockingQueue<String> queue = new ArrayBlockingQueue<>(5);`                               |
| 16  | LinkedBlockingQueue        | Class      | `put()`, `take()`                                  | An optionally bounded blocking queue backed by linked nodes.                                     | `LinkedBlockingQueue<Integer> lbq = new LinkedBlockingQueue<>();`                              |
| 17  | PriorityBlockingQueue      | Class      | `put()`, `take()`                                  | An unbounded blocking queue with elements ordered by priority.                                   | `PriorityBlockingQueue<Integer> pq = new PriorityBlockingQueue<>();`                            |
| 18  | DelayQueue                 | Class      | `put()`, `take()`                                  | A time-based scheduling queue where elements must implement `Delayed`.                           | `DelayQueue<DelayedTask> dq = new DelayQueue<>();`                                              |
| 19  | SynchronousQueue           | Class      | `put()`, `take()`                                  | A queue where each insert operation must wait for a corresponding remove.                        | `SynchronousQueue<String> sq = new SynchronousQueue<>();`                                       |
| 20  | Exchanger                  | Class      | `exchange()`                                       | Allows two threads to exchange objects at a synchronization point.                               | `String result = exchanger.exchange("data");`                                                  |
| 21  | Phaser                     | Class      | `arrive()`, `awaitAdvance()`                       | Flexible synchronization barrier for phased computation.                                         | `phaser.arriveAndAwaitAdvance();`                                                               |
| 22  | AtomicInteger              | Class      | `incrementAndGet()`, `get()`, `addAndGet()`        | Supports atomic operations on integers.                                                          | `AtomicInteger i = new AtomicInteger(0); i.incrementAndGet();`                                  |
| 23  | ThreadLocal<T>             | Class      | `get()`, `set()`, `remove()`                       | Provides thread-local variables unique to each thread.                                           | `ThreadLocal<Integer> local = ThreadLocal.withInitial(() -> 1); local.get();`                   |
| 24  | FutureTask<T>              | Class      | `run()`, `get()`                                   | A cancellable asynchronous computation that can wrap Callable or Runnable.                       | `FutureTask<String> task = new FutureTask<>(() -> "Done"); new Thread(task).start();`          |

Let me know if youâ€™d like me to break these into categorized groups or export this to a file for revision!

